// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	// Zero'ing x and y according to zx,zy
	Mux16(a=x, b=false, sel=zx, out=XOrZero);
	Mux16(a=y, b=false, sel=zy, out=YOrZero);


   	// Negating x and y according to nx,ny
	Not16(in=XOrZero, out=NotXOrZero);  // (Maybe) Not'ing X
	Mux16(a=XOrZero, b=NotXOrZero, sel=nx, out=XFinal);  // Choosing according to nx
	Not16(in=YOrZero, out=NotYOrZero);  // (Maybe) Not'ing Y
	Mux16(a=YOrZero, b=NotYOrZero, sel=ny, out=YFinal);  // Choosing according to ny

	// Now handling 'f'
	And16(a=XFinal, b=YFinal, out=XAndY);  // bitwise and
	Add16(a=XFinal, b=YFinal, out=XPlusY);  // integer 2's complement addition
	Mux16(a=XAndY, b=XPlusY, sel=f, out=Result);
	
	// Now handling negating output
	Not16(in=Result, out=NotResult);  // Negating the current output
	Mux16(a=Result, b=NotResult, sel=no, out=out, out=FinalResult, out[15]=IsResultNeg);  // Choosing current output according to the input 'no'
	
	// Negating the final result
	Not16(in=FinalResult, out=NotFinalResult);
	
	// Now handling the extra output: 'zr'
	// If FinalResult==0 (false) hence NotFinalResult is True, so T&T==T
	And16(a=NotFinalResult, b=true, out[0..7]=ZrResultFirstHalf, out[8..15]=ZrResultSecondHalf);
	Or8Way(in=ZrResultFirstHalf, out=ZrOutputOne);
	Or8Way(in=ZrResultSecondHalf, out=ZrOutputTwo);
	Or(a=ZrOutputOne, b=ZrOutputTwo, out=zr);

	// Now handling the extra output: 'ng'
	//And16(a=FinalResult, b[0..15]=true, out[0..7]=NgResultFirstHalf, out[8..15]=NgResultSecondHalf);
	//Or8Way(in=NgResultFirstHalf, out=NgOutputOne);
	//Or8Way(in=NgResultSecondHalf, out=NgOutputTwo);
	//Or(a=NgOutputOne, b=NgOutputTwo, out=ng);

	// Now handling the extra output: 'ng'
	And(a=IsResultNeg, b=true, out=ng);
}