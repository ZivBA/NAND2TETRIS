// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current program
                         // (reset == 1) or continue executing the current
                         // program (reset == 0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // RAM address (of M)
        pc[15];          // ROM address (of next instruction)

    PARTS:
    // First define type of instructions and output 'writeM':
    Not(in=instruction[15], out=AInst);
    Not(in=AInst, out=CInst);
    And(a=CInst, b=instruction[3], out=writeM);  // Setting 'writeM' output!
    //////////////////////////////////////////////////////////

    And(a=CInst, b=instruction[5], out=MuxAReg);    // C-inst and dest to A-reg?
    Mux16(a=instruction, b=ALUout, sel=MuxAReg, out=InsOrALU);
    
    Or(a=AInst, b=MuxAReg, out=LoadAReg);    // If (A-Inst) or (C-Inst and 'd1' load bit) then Load to A-Register
    ARegister(in=InsOrALU, load=LoadAReg, out=ARegOut);
    
    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=MuxALU);   // Select Addr or Mem according to the Instruction type

    And(a=CInst, b=instruction[4], out=LoadDReg);   // If C-Instruction and 'd2' load bit then Load D-Register
    DRegister(in=ALUout, load=LoadDReg, out=DRegOut);    // load the D-Register from ALU
    
    ALU(x=DRegOut, y=MuxALU, zx=instruction[11], nx=instruction[10], 
                            zy=instruction[9], ny=instruction[8],
                            f=instruction[7], no=instruction[6],
                            out=ALUout, zr=ALUzr, ng=ALUng);
        
    // Routing CPU chip outputs:
    Or16(a=false, b=ARegOut, out[0..14]=addressM);
    Or16(a=false, b=ALUout, out=outM);

    // Now handling JUMP conditions, deciding if to Increment PC or Load ARegOut into PC:
    And(a=ALUzr, b=instruction[1], out=JEQ);    // If zero and jump then JEQ
    And(a=ALUng, b=instruction[2], out=JLT);    // If negative and jump then JLT
    Or(a=ALUzr, b=ALUng, out=ZeroOrNegative);
    Not(in=ZeroOrNegative, out=Positive);       // If positive, meaning not zero and not negative
    And(a=Positive, b=instruction[0], out=JGT); // If positive and jump then JGT
    // Checking jump which jump conditions:
    Or(a=JEQ, b=JLT, out=JLE);
    Or(a=JLE, b=JGT, out=jumpToA);              // Load PC if conditions are met
    // Handling PC load and PC Increment:
    And(a=CInst, b=jumpToA, out=PCload);        // If C-Instruction then JUMP only
    Not(in=PCload, out=PCinc);                  // If not loading then Increment PC

    PC(in=ARegOut, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);
    ///////////////////////////////////////////////////////////////////////////////////////
}