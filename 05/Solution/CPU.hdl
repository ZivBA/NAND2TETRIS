// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
  // program (reset==1) or continue executing
  // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        // Initializing stuff:
        And16(a=instruction, b=true, out[0]=j3, out[1]=j2, out[2]=j1, out[3]=d3, out[4]=d2, out[5]=d1,
                       out[6]=c6, out[7]=c5, out[8]=c4, out[9]=c3, out[10]=c2, out[11]=c1,
                       out[12]=IsAddrOp, out[15]=OpCode, out[0..14]=null);
        DMux(in=true, sel=OpCode, a=AInst, b=CInst);  // Define A or C instruction
////////////////////////////////////////////////////////////////

        // Related to A-Register:
        And(a=CInst, b=d1, out=MuxAReg);    // Selection of Mux is 1 if C-Instruction and 'd1' bit
        Or(a=AInst, b=MuxAReg, out=LoadAReg);    // If (A-Inst) or (C-Inst and 'd1' load bit) then Load to A-Register
        Mux16(a=instruction, b=ALUout, sel=OpCode, out=InstOrALU);
        ARegister(in=InstOrALU, load=LoadAReg, out=ARegOut);
//////////////////////////////////////////////////////////////////

        // Related to ALU:
        ALU(x=DRegOut, y=MuxALU, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6,
            out=ALUout, zr=ALUzr, ng=ALUng);
//////////////////////////////////////////////////////////////////

        // Related to D-Register:
        Mux16(a=ARegOut, b=inM, sel=IsAddrOp, out=MuxALU);   // Select Addr or Mem according to the Instruction type
        And(a=CInst, b=d2, out=LoadDReg);   // If C-Instruction and 'd2' load bit then Load D-Register
        DRegister(in=ALUout, load=LoadDReg, out=DRegOut);    // load the D-Register from ALU
//////////////////////////////////////////////////////////////////

        // Routing CPU chip outputs:
        Or16(a=false, b=ARegOut, out[0..14]=addressM);
        Or16(a=false, b=ALUout, out=outM);
        And(a=CInst, b=d3, out=writeM);
//////////////////////////////////////////////////////////////////

        // Now handling JUMP conditions, deciding if either to Increment PC or Load ARegOut into PC.
        // Reminder:
        //      if j1==1 then jump condition is: out<0
        //      if j2==1 then jump condition is: out==0
        //      if j3==1 then jump condition is: out>0
        // We will check if jump conditions is met using the ALU outputs.
        And(a=j1, b=ALUng, out=IsJLT);  // If JLT and ALU output is neg
        And(a=j2, b=ALUzr, out=IsJEQ);  // If JEQ and ALU output is zero
        Or(a=ALUzr, b=ALUng, out=zrORng);  // Is ALU output zero or negative?
        Not(in=zrORng, out=NotZeroOrNeg);  // Negate
        And(a=NotZeroOrNeg, b=j3, out=IsJGT);  // If JGT and ALU out Greater than 0 then JGT! 
        Or(a=IsJLT, b=IsJEQ, out=IsJLE);  // If either JLT or JEQ then JLE
        Or(a=IsJLE, b=IsJGT, out=JumpCond);  // If either JLE or JGT then load A-Reg to PC
        
        And(a=CInst, b=JumpCond, out=PCload);   // Jump only if condition is met and C-Instruction

        Not(in=PCload, out=PCinc);  // If not loading then Increment, not both!

        // Last output, PC:
        PC(in=ARegOut, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);
}