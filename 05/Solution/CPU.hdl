// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        
        // A or C instruction mux.
        Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=InsOrALU);
        Not(in=instruction[15], out=AInst);
        And(a=AInst, b=instruction[5], out=LoadAInst );
        ARegister(in=InsOrALU, load=LoadAInst, out=ARegister, out[0..14]=addressM);

        // Memory or Address mux
        Mux16(a=inM, b=ARegister, sel=instruction[12], out=AddressOrMem);
        // ALU register outputs
        DRegister(in=ALUOut, load=instruction[4], out=DRegister);
        Register(in=ALUOut, load=instruction[3], out=outM);



        ALU(x=DRegister, y=AddressOrMem, zx=instruction[11], nx=instruction[10],
                                    zy=instruction[9], ny=instruction[8],
                                    f=instruction[7], no=instruction[6],
                                    out=ALUOut, zr=ALUzr, ng=ALUng);


        Xor(a=ALUzr, b=ALUng, out=notGT);
        // jump condition bits:
        // JEQ = ALUzr.
        // JLT = ALUng.
        // null = false;
        // JMP = true;
        /* JGT */ Not(in=notGT, out=JGT);
        /* JGE */ Or(a=JGT, b=ALUzr, out=JGE);
        /* JNE */ Not(in=ALUzr, out=JNE);
        /* JLE */ Or(a=ALUzr, b=ALUng, out=JLE);

        Mux8Way16(a=false, b[0]=JGT, c[0]=ALUzr, d[0]=JGE, e[0]=ALUng, 
        f[0]=JNE, g[0]=JLE, h[0]=true, sel=instruction[0..2], out[0]=JumpBit);

        Not(in=JumpBit, out=PCIncBit);


        // Possible problem: pc is 15bit long, sub-the-bus-fuck it
        PC(in=ARegister, load=JumpBit, inc=PCIncBit, reset=reset, out[0..14]=pc);
}