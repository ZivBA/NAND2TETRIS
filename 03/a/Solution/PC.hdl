// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
	    Inc16(in=PrevOutput, out=IncrementedPrevOutput);  // Incrementing the previous output in-case user wants to Inc

	    // We will now operate on the previous output and finally load it into a Register so it will output it at the next cycle!

	    // If inc==1, Save the Incremented previous input into the register and output it at the next cycle. Else bypass the previous output.
	    Mux16(a=PrevOutput, b=IncrementedPrevOutput, sel=inc, out=Transform0);
	    // If load==1, Save the current input into the register and output it at the next cycle. Else use prev transform
	    Mux16(a=Transform0, b=in, sel=load, out=Transform1);
	    // If reset==1, Save the reset output into the register and output it at the next cycle. Else just bypass the input 'a'
	    Mux16(a=Transform1, b=false, sel=reset, out=Final);  

	    // the output from the register also needs to get fed back through 
	    // the combinational logic to get processed for the next IncrementedPrevOutput cycle.
	    Register(in=Final, load=true, out=PrevOutput, out=out);
}
